-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Collection of smart contracts to develop the plutus/wallet interface
--   
--   Collection of smart contracts to develop the plutus/wallet interface.
@package plutus-use-cases
@version 0.1.0.0


-- | Crowdfunding contract implemented using the [[Plutus]] interface. This
--   is the fully parallel version that collects all contributions in a
--   single transaction. This is, of course, limited by the maximum number
--   of inputs a transaction can have.
module Language.PlutusTx.Coordination.Contracts.CrowdFunding

-- | A crowdfunding campaign.
data Campaign
Campaign :: Slot -> Value -> Slot -> CampaignActor -> Campaign
[campaignDeadline] :: Campaign -> Slot
[campaignTarget] :: Campaign -> Value
[campaignCollectionDeadline] :: Campaign -> Slot
[campaignOwner] :: Campaign -> CampaignActor
type CampaignActor = PubKey

-- | Contribute funds to the campaign (contributor)
contribute :: (WalletAPI m, WalletDiagnostics m) => Campaign -> Value -> m ()

-- | Register a [[EventHandler]] to collect all the funds of a campaign
collect :: (WalletAPI m, WalletDiagnostics m) => Campaign -> m ()

-- | The address of a [[Campaign]]
campaignAddress :: Campaign -> Address
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.CrowdFunding.CampaignAction
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.CrowdFunding.CampaignAction
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.CrowdFunding.CampaignAction
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.CrowdFunding.Campaign
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.CrowdFunding.Campaign
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.CrowdFunding.Campaign


-- | A futures contract in Plutus. This example illustrates three concepts.
--   1. Maintaining a margin (a kind of deposit) during the duration of the
--   contract to protect against breach of contract (see note [Futures in
--   Plutus]) 2. Using oracle values to obtain current pricing information
--   (see note [Oracles] in Language.PlutusTx.Coordination.Contracts) 3.
--   Using the redeemer script to model actions that the participants in
--   the contract may take.
module Language.PlutusTx.Coordination.Contracts.Future

-- | Basic data of a futures contract. <a>Future</a> contains all values
--   that do not change during the lifetime of the contract.
data Future
Future :: Slot -> Int -> Value -> Value -> PubKey -> Value -> Future
[futureDeliveryDate] :: Future -> Slot
[futureUnits] :: Future -> Int
[futureUnitPrice] :: Future -> Value
[futureInitialMargin] :: Future -> Value
[futurePriceOracle] :: Future -> PubKey

-- | How much a participant loses if they fail to make the required margin
--   payments.
[futureMarginPenalty] :: Future -> Value

-- | The current "state" of the futures contract. <a>FutureData</a>
--   contains values that may change during the lifetime of the contract.
--   This is the data script.
data FutureData
FutureData :: PubKey -> PubKey -> Value -> Value -> FutureData

-- | Holder of the long position (buyer)
[futureDataLong] :: FutureData -> PubKey

-- | Holder of the short position (seller)
[futureDataShort] :: FutureData -> PubKey

-- | Current balance of the margin account of the long position
[futureDataMarginLong] :: FutureData -> Value

-- | Current balance of the margin account of the short position
[futureDataMarginShort] :: FutureData -> Value

-- | Actions that either participant may take. This is the redeemer script.
data FutureRedeemer

-- | Make a margin payment
AdjustMargin :: FutureRedeemer

-- | Settle the contract
Settle :: (OracleValue Value) -> FutureRedeemer

-- | Initialise the futures contract by paying the initial margin.
initialise :: (MonadError WalletAPIError m, WalletAPI m) => PubKey -> PubKey -> Future -> m ()

-- | Close the position by extracting the payment
settle :: (MonadError WalletAPIError m, WalletAPI m) => [TxOutRef] -> Future -> FutureData -> OracleValue Value -> m ()

-- | Settle the position early if a margin payment has been missed.
settleEarly :: (MonadError WalletAPIError m, WalletAPI m) => [TxOutRef] -> Future -> FutureData -> OracleValue Value -> m ()
adjustMargin :: (MonadError WalletAPIError m, WalletAPI m) => [TxOutRef] -> Future -> FutureData -> Value -> m ()
validatorScript :: Future -> ValidatorScript
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Future.FutureRedeemer
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Future.FutureRedeemer
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Future.FutureData
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Future.FutureData
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Future.Future
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Future.Future
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.Future.FutureRedeemer
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.Future.FutureData
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.Future.Future


-- | A guessing game
module Language.PlutusTx.Coordination.Contracts.Game
lock :: (WalletAPI m, WalletDiagnostics m) => String -> Value -> m ()
guess :: (WalletAPI m, WalletDiagnostics m) => String -> m ()

-- | Tell the wallet to start watching the address of the game script
startGame :: WalletAPI m => m ()
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Game.ClearString
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Game.ClearString
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Game.HashedString
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Game.HashedString

module Language.PlutusTx.Coordination.Contracts.Swap

-- | A swap is an agreement to exchange cashflows at future dates. To keep
--   things simple, this is an interest rate swap (meaning that the
--   cashflows are interest payments on the same principal amount but with
--   two different interest rates, of which one is fixed and one is
--   floating (varying with time)) with only a single payment date.
--   
--   At the beginning of the contract, the fixed rate is set to the
--   expected future value of the floating rate (so if the floating rate
--   behaves as expected, the two payments will be exactly equal).
data Swap
Swap :: !Value -> !Slot -> !(Ratio Int) -> !(Ratio Int) -> !Value -> !PubKey -> Swap
[swapNotionalAmt] :: Swap -> !Value
[swapObservationTime] :: Swap -> !Slot

-- | Interest rate fixed at the beginning of the contract
[swapFixedRate] :: Swap -> !(Ratio Int)

-- | Interest rate whose value will be observed (by an oracle) on the day
--   of the payment
[swapFloatingRate] :: Swap -> !(Ratio Int)

-- | Margin deposited at the beginning of the contract to protect against
--   default (one party failing to pay)
[swapMargin] :: Swap -> !Value

-- | Public key of the oracle (see note [Oracles] in
--   [[Language.PlutusTx.Coordination.Contracts]])
[swapOracle] :: Swap -> !PubKey

-- | Validator script for the two transactions that initialise the swap.
--   See note [Swap Transactions] See note [Contracts and Validator
--   Scripts] in Language.Plutus.Coordination.Contracts
swapValidator :: Swap -> ValidatorScript
instance GHC.Classes.Eq a => GHC.Classes.Eq (Language.PlutusTx.Coordination.Contracts.Swap.Ratio a)


-- | Vesting scheme as a PLC contract
module Language.PlutusTx.Coordination.Contracts.Vesting

-- | A vesting scheme consisting of two tranches. Each tranche defines a
--   date (slot) after which an additional amount of money can be spent.
data Vesting
Vesting :: VestingTranche -> VestingTranche -> PubKey -> Vesting
[vestingTranche1] :: Vesting -> VestingTranche
[vestingTranche2] :: Vesting -> VestingTranche
[vestingOwner] :: Vesting -> PubKey

-- | Tranche of a vesting scheme.
data VestingTranche
VestingTranche :: Slot -> Value -> VestingTranche
[vestingTrancheDate] :: VestingTranche -> Slot
[vestingTrancheAmount] :: VestingTranche -> Value

-- | Data script for vesting utxo
data VestingData
VestingData :: ValidatorHash -> Value -> VestingData

-- | Hash of the validator script
[vestingDataHash] :: VestingData -> ValidatorHash

-- | How much of the vested value has already been retrieved
[vestingDataPaidOut] :: VestingData -> Value

-- | Lock some funds with the vesting validator script and return a
--   [[VestingData]] representing the current state of the process
vestFunds :: (MonadError WalletAPIError m, WalletAPI m) => Vesting -> Value -> m VestingData

-- | Retrieve some of the vested funds.
retrieveFunds :: (Monad m, WalletAPI m) => Vesting -> VestingData -> TxOutRef -> Value -> m VestingData
validatorScript :: Vesting -> ValidatorScript

-- | The total amount of money vested
totalAmount :: Vesting -> Value
validatorScriptHash :: Vesting -> ValidatorHash
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Vesting.VestingData
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Vesting.VestingData
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.Vesting.VestingData
instance GHC.Classes.Eq Language.PlutusTx.Coordination.Contracts.Vesting.VestingData
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Vesting.Vesting
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Vesting.Vesting
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.Vesting.Vesting
instance Language.PlutusTx.Lift.Class.Typeable Language.PlutusTx.Coordination.Contracts.Vesting.VestingTranche
instance Language.PlutusTx.Lift.Class.Lift Language.PlutusTx.Coordination.Contracts.Vesting.VestingTranche
instance GHC.Generics.Generic Language.PlutusTx.Coordination.Contracts.Vesting.VestingTranche

module Language.PlutusTx.Coordination.Contracts
