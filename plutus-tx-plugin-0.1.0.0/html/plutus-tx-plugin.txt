-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | PlutusTx compiler plugin
--   
--   GHC compiler plugin for the PlutusTx compiler
@package plutus-tx-plugin
@version 0.1.0.0

module Language.PlutusTx.Compiler.Error
type ConvError = WithContext Text (Error ())
data Error a
PLCError :: (Error a) -> Error a
PIRError :: (Error (Provenance a)) -> Error a
ConversionError :: Text -> Error a
UnsupportedError :: Text -> Error a
FreeVariableError :: Text -> Error a
ValueRestrictionError :: Text -> Error a

-- | An error with some (nested) context.
data WithContext c e
NoContext :: e -> WithContext c e
WithContextC :: c -> (WithContext c e) -> WithContext c e
withContext :: (MonadError (WithContext c e) m) => c -> m a -> m a
withContextM :: (MonadError (WithContext c e) m) => m c -> m a -> m a
throwPlain :: MonadError (WithContext c e) m => e -> m a
stripContext :: WithContext c e -> e
instance Language.PlutusTx.Compiler.Error.AsError (Language.PlutusTx.Compiler.Error.Error a) a
instance Language.PlutusCore.Error.AsTypeError Language.PlutusTx.Compiler.Error.ConvError ()
instance Language.PlutusIR.Compiler.Error.AsError Language.PlutusTx.Compiler.Error.ConvError (Language.PlutusIR.Compiler.Provenance.Provenance ())
instance Data.Text.Prettyprint.Doc.Internal.Pretty a => Data.Text.Prettyprint.Doc.Internal.Pretty (Language.PlutusTx.Compiler.Error.Error a)
instance Data.Text.Prettyprint.Doc.Internal.Pretty a => PlutusPrelude.PrettyBy Language.PlutusCore.Pretty.Plc.PrettyConfigPlc (Language.PlutusTx.Compiler.Error.Error a)
instance Language.PlutusTx.Compiler.Error.AsWithContext (Language.PlutusTx.Compiler.Error.WithContext c e) c e
instance (Data.Text.Prettyprint.Doc.Internal.Pretty c, Data.Text.Prettyprint.Doc.Internal.Pretty e) => Data.Text.Prettyprint.Doc.Internal.Pretty (Language.PlutusTx.Compiler.Error.WithContext c e)
instance GHC.Base.Functor (Language.PlutusTx.Compiler.Error.WithContext c)

module Language.PlutusTx.Lift.Class

-- | Class for types which have a corresponding Plutus IR type. Instances
--   should usually be declared for type constructors, instances for
--   applied types will be derived.
class Typeable (a :: k)

-- | Get the Plutus IR type corresponding to this type.
typeRep :: (Typeable a, (RTCompiling m)) => Proxy a -> m (Type TyName ())

-- | Class for types which can be lifted into Plutus IR.
class Lift a

-- | Get a Plutus IR term corresponding to the given value.
lift :: (Lift a, (RTCompiling m)) => a -> m (Term TyName Name ())
makeTypeable :: Name -> Q [Dec]
makeLift :: Name -> Q [Dec]
instance GHC.Classes.Ord Language.PlutusTx.Lift.Class.Dep
instance GHC.Classes.Eq Language.PlutusTx.Lift.Class.Dep
instance GHC.Show.Show Language.PlutusTx.Lift.Class.Dep

module Language.PlutusTx.Lift
makeLift :: Name -> Q [Dec]

-- | Get a Plutus Core term corresponding to the given value.
lift :: (Lift a, AsError e (Provenance ()), MonadError e m, MonadQuote m) => a -> m (Term TyName Name ())

-- | Get a Plutus Core program corresponding to the given value.
liftProgram :: (Lift a, AsError e (Provenance ()), MonadError e m, MonadQuote m) => a -> m (Program TyName Name ())

-- | Get a Plutus Core term corresponding to the given value, throwing any
--   errors that occur as exceptions and ignoring fresh names.
unsafeLift :: Lift a => a -> Term TyName Name ()

-- | Get a Plutus Core program corresponding to the given value, throwing
--   any errors that occur as exceptions and ignoring fresh names.
unsafeLiftProgram :: Lift a => a -> Program TyName Name ()


-- | Primitive names and functions for working with Plutus Core builtins.
module Language.PlutusTx.Builtins
concatenate :: ByteString -> ByteString -> ByteString
takeByteString :: Int -> ByteString -> ByteString
dropByteString :: Int -> ByteString -> ByteString
sha2_256 :: ByteString -> ByteString
sha3_256 :: ByteString -> ByteString
verifySignature :: ByteString -> ByteString -> ByteString -> Bool
equalsByteString :: ByteString -> ByteString -> Bool
txhash :: ByteString
blocknum :: Int
addInteger :: Int -> Int -> Int
subtractInteger :: Int -> Int -> Int
multiplyInteger :: Int -> Int -> Int
divideInteger :: Int -> Int -> Int
remainderInteger :: Int -> Int -> Int
greaterThanInteger :: Int -> Int -> Bool
greaterThanEqInteger :: Int -> Int -> Bool
lessThanInteger :: Int -> Int -> Bool
lessThanEqInteger :: Int -> Int -> Bool
equalsInteger :: Int -> Int -> Bool
error :: () -> a

-- | An opaque type representing PLC strings.
data String
appendString :: String -> String -> String
emptyString :: String
charToString :: Char -> String
trace :: String -> ()

module Language.PlutusTx.Plugin

-- | A compiled Plutus Tx program. The type parameter inicates the type of
--   the Haskell expression that was compiled, and hence the type of the
--   compiled code.
data CompiledCode a
getSerializedPlc :: CompiledCode a -> ByteString
getSerializedPir :: CompiledCode a -> ByteString
getPlc :: CompiledCode a -> Program TyName Name ()
getPir :: CompiledCode a -> Program TyName Name ()
plugin :: Plugin

-- | Marks the given expression for conversion to PLC.
plc :: forall (loc :: Symbol) a. a -> CompiledCode a
instance GHC.Show.Show Language.PlutusTx.Plugin.ImpossibleDeserialisationFailure
instance GHC.Exception.Exception Language.PlutusTx.Plugin.ImpossibleDeserialisationFailure
instance Language.PlutusTx.Lift.Class.Lift (Language.PlutusTx.Plugin.CompiledCode a)
