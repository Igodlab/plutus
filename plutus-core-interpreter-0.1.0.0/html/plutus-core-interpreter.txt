-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Virtual machine for Plutus Core
--   
--   Virtual machine for Plutus Core
@package plutus-core-interpreter
@version 0.1.0.0


-- | The CEK machine. Rules are the same as for the CK machine from
--   <a>Language.PlutusCore.Evaluation.CkMachine</a>, except we do not use
--   substitution and use environments instead. The CEK machine relies on
--   variables having non-equal <a>Unique</a>s whenever they have non-equal
--   string names. I.e. <a>Unique</a>s are used instead of string names.
--   This is for efficiency reasons. The type checker pass is a
--   prerequisite. Feeding ill-typed terms to the CEK machine will likely
--   result in a <a>MachineException</a>. The CEK machine generates
--   booleans along the way which might contain globally non-unique
--   <a>Unique</a>s. This is not a problem as the CEK machines handles name
--   capture by design. Dynamic extensions to the set of built-ins are
--   allowed. In case an unknown dynamic built-in is encountered, an
--   <a>UnknownDynamicBuiltinNameError</a> is returned (wrapped in
--   <a>OtherMachineError</a>).
module Language.PlutusCore.Interpreter.CekMachine

-- | The CEK machine-specific <a>MachineException</a>.
type CekMachineException = MachineException UnknownDynamicBuiltinNameError

-- | The parameterized type of results various evaluation engines return.
data EvaluationResultF a
EvaluationSuccess :: a -> EvaluationResultF a
EvaluationFailure :: EvaluationResultF a

-- | The type of results various evaluation engines return.
type EvaluationResult = EvaluationResultF Value TyName Name ()

-- | Evaluate a term using the CEK machine.
evaluateCekCatch :: DynamicBuiltinNameMeanings -> Plain Term -> Either CekMachineException EvaluationResult

-- | Evaluate a term using the CEK machine. May throw a
--   <a>CekMachineException</a>.
evaluateCek :: DynamicBuiltinNameMeanings -> Term TyName Name () -> EvaluationResult
readDynamicBuiltinCek :: KnownDynamicBuiltinType dyn => Term TyName Name () -> Either CekMachineException (Maybe dyn)

-- | Run a program using the CEK machine. May throw a
--   <a>CekMachineException</a>. Calls <a>evaluateCek</a> under the hood.
runCek :: DynamicBuiltinNameMeanings -> Program TyName Name () -> EvaluationResult


-- | The L machine A lazy machine based on the L machine of Friedman et al.
--   [Improving the Lazy Krivine Machine] For more details see the document
--   in plutus<i>docs</i>fomega/lazy-machine The code here's closely based
--   on the CEK machine implementation.
module Language.PlutusCore.Interpreter.LMachine

-- | The parameterized type of results various evaluation engines return.
data EvaluationResultF a
EvaluationSuccess :: a -> EvaluationResultF a
EvaluationFailure :: EvaluationResultF a

-- | The type of results various evaluation engines return.
type EvaluationResult = EvaluationResultF Value TyName Name ()

-- | Evaluate a term using the L machine. May throw an
--   <a>MachineException</a>.
evaluateL :: Term TyName Name () -> EvaluationResult

-- | Run a program using the L machine. May throw a
--   <a>MachineException</a>. We're not using the dynamic names at the
--   moment, but we'll require them eventually.
runL :: DynamicBuiltinNameMeanings -> Program TyName Name () -> EvaluationResult
instance GHC.Show.Show Language.PlutusCore.Interpreter.LMachine.Frame
instance GHC.Show.Show Language.PlutusCore.Interpreter.LMachine.Closure
instance GHC.Show.Show Language.PlutusCore.Interpreter.LMachine.Environment
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.PlutusCore.Interpreter.LMachine.LMachineError
