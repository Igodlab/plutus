(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype
            (tyvardecl Bool (type))
            
            Bool_match
            (vardecl True Bool) (vardecl False Bool)
          )
        )
        (let
          (nonrec)
          (termbind
            (vardecl
              greaterThanInteger (fun (con integer) (fun (con integer) Bool))
            )
            (lam
              arg
              (con integer)
              (lam
                arg
                (con integer)
                [
                  (lam
                    b
                    (all a (type) (fun a (fun a a)))
                    [ [ { b Bool } True ] False ]
                  )
                  [ [ (builtin greaterThanInteger) arg ] arg ]
                ]
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (vardecl nandDirect (fun Bool (fun Bool Bool)))
              (lam
                ds
                Bool
                (lam
                  ds
                  Bool
                  [
                    [
                      [
                        { [ Bool_match ds ] (fun Unit Bool) }
                        (lam thunk Unit False)
                      ]
                      (lam
                        thunk Unit [ [ { [ Bool_match ds ] Bool } False ] True ]
                      )
                    ]
                    Unit
                  ]
                )
              )
            )
            (let
              (nonrec)
              (termbind
                (vardecl andDirect (fun Bool (fun Bool Bool)))
                (lam
                  ds
                  Bool
                  (lam
                    ds
                    Bool
                    [
                      [ nandDirect [ [ nandDirect ds ] ds ] ]
                      [ [ nandDirect ds ] ds ]
                    ]
                  )
                )
              )
              (let
                (rec)
                (termbind
                  (vardecl
                    allDirect
                    (all a (type) (fun (fun a Bool) (fun [List a] Bool)))
                  )
                  (abs
                    a
                    (type)
                    (lam
                      p
                      (fun a Bool)
                      (lam
                        l
                        [List a]
                        [
                          [ { [ { Nil_match a } l ] Bool } True ]
                          (lam
                            h
                            a
                            (lam
                              t
                              [List a]
                              [
                                [ andDirect [ p h ] ]
                                [ [ { allDirect a } p ] t ]
                              ]
                            )
                          )
                        ]
                      )
                    )
                  )
                )
                [
                  [
                    { allDirect (con integer) }
                    (lam ds (con integer) [ [ greaterThanInteger ds ] (con 5) ])
                  ]
                  [
                    [ { Cons (con integer) } (con 7) ]
                    [ [ { Cons (con integer) } (con 6) ] { Nil (con integer) } ]
                  ]
                ]
              )
            )
          )
        )
      )
    )
  )
)