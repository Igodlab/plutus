-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The PlutusTx compiler frontend
--   
--   The PlutusTx compiler frontend
@package plutus-tx
@version 0.1.0.0

module Language.PlutusTx.Evaluation

-- | Evaluate a program in the CEK machine with the usual string dynamic
--   builtins.
evaluateCek :: Program TyName Name () -> EvaluationResult

-- | Evaluate a program in the CEK machine with the usual string dynamic
--   builtins and tracing, additionally returning the trace output.
evaluateCekTrace :: Program TyName Name () -> ([String], EvaluationResult)

module Language.PlutusTx.Prelude

-- | Convert a Haskell <a>String</a> into a PlutusTx <a>String</a>.
toPlutusString :: Q (TExp (String -> String))

-- | Emit the given string as a trace message before evaluating the
--   argument.
trace :: Q (TExp (String -> a -> a))

-- | A version of <a>trace</a> that takes a Haskell <a>String</a>.
traceH :: Q (TExp (String -> a -> a))

-- | Terminate the evaluation of the script with an error message
error :: Q (TExp (() -> a))

-- | Logical AND
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(and) True False ||])
--   False
--   </pre>
and :: Q (TExp (Bool -> Bool -> Bool))

-- | Logical OR
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(or) True False ||])
--   True
--   </pre>
or :: Q (TExp (Bool -> Bool -> Bool))

-- | Logical negation
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(not) True ||])
--   False
--   </pre>
not :: Q (TExp (Bool -> Bool))

-- | The smaller of two <a>Int</a>s
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(min) 10 5 ||])
--   5
--   </pre>
min :: Q (TExp (Int -> Int -> Int))

-- | The larger of two <a>Int</a>s
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(max) 10 5 ||])
--   10
--   </pre>
max :: Q (TExp (Int -> Int -> Int))

-- | Check if a <a>Maybe</a> <tt>a</tt> is <tt>Just a</tt>
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(isJust) Nothing ||])
--   False
--   
--   &gt;&gt;&gt; $$([|| $$(isJust) (Just "plutus") ||])
--   True
--   </pre>
isJust :: Q (TExp (Maybe a -> Bool))

-- | Check if a <a>Maybe</a> <tt>a</tt> is <tt>Nothing</tt>
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(isNothing) Nothing ||])
--   True
--   
--   &gt;&gt;&gt; $$([|| $$(isNothing) (Just "plutus") ||])
--   False
--   </pre>
isNothing :: Q (TExp (Maybe a -> Bool))

-- | PlutusTx version of <a>maybe</a>.
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(maybe) "platypus" (\s -&gt; s) (Just "plutus") ||])
--   "plutus"
--   
--   &gt;&gt;&gt; $$([|| $$(maybe) "platypus" (\s -&gt; s) Nothing ||])
--   "platypus"
--   </pre>
maybe :: Q (TExp (b -> (a -> b) -> Maybe a -> b))

-- | PlutusTx version of <a>map</a>.
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(map) (\i -&gt; i + 1) [1, 2, 3] ||])
--   [2,3,4]
--   </pre>
map :: Q (TExp ((a -> b) -> [a] -> [b]))

-- | PlutusTx version of <a>foldr</a>.
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(foldr) (\i s -&gt; s + i) 0 [1, 2, 3, 4] ||])
--   10
--   </pre>
foldr :: Q (TExp ((a -> b -> b) -> b -> [a] -> b))

-- | PlutusTx version of <a>foldl</a>.
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(foldl) (\s i -&gt; s + i) 0 [1, 2, 3, 4] ||])
--   10
--   </pre>
foldl :: Q (TExp ((b -> a -> b) -> b -> [a] -> b))

-- | <a>length</a> <tt>xs</tt> is the number of elements in <tt>xs</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(length) [1, 2, 3, 4] ||])
--   4
--   </pre>
length :: Q (TExp ([a] -> Int))

-- | PlutusTx version of <a>all</a>.
--   
--   <pre>
--   &gt;&gt;&gt; $$([|| $$(all) (\i -&gt; i &gt; 5) [6, 8, 12] ||])
--   True
--   </pre>
all :: Q (TExp ((a -> Bool) -> [a] -> Bool))

-- | A space-efficient representation of a <a>Word8</a> vector, supporting
--   many efficient operations.
--   
--   A lazy <a>ByteString</a> contains 8-bit bytes, or by using the
--   operations from <a>Data.ByteString.Lazy.Char8</a> it can be
--   interpreted as containing 8-bit characters.
data ByteString
txhash :: Q (TExp ByteString)

-- | The double SHA256 hash of a <a>ByteString</a>
sha2_256 :: Q (TExp (ByteString -> ByteString))

-- | The triple SHA256 hash of a <a>ByteString</a>
sha3_256 :: Q (TExp (ByteString -> ByteString))

-- | Check if two <a>ByteString</a>s are equal
equalsByteString :: Q (TExp (ByteString -> ByteString -> Bool))

-- | Returns the n length prefix of a <a>ByteString</a>
takeByteString :: Q (TExp (Int -> ByteString -> ByteString))

-- | Returns the suffix of a <a>ByteString</a> after n elements
dropByteString :: Q (TExp (Int -> ByteString -> ByteString))

-- | Concatenates two <a>ByteString</a>s together.
concatenate :: Q (TExp (ByteString -> ByteString -> ByteString))

module Language.PlutusTx.TH

-- | Compile a quoted Haskell expression into a corresponding Plutus Core
--   program.
compile :: Q (TExp a) -> Q (TExp (CompiledCode a))

-- | Compile a quoted Haskell expression into a corresponding Plutus Core
--   program.
compileUntyped :: Q Exp -> Q Exp

-- | A compiled Plutus Tx program. The type parameter inicates the type of
--   the Haskell expression that was compiled, and hence the type of the
--   compiled code.
data CompiledCode a
getSerializedPlc :: () => CompiledCode a -> ByteString
getSerializedPir :: () => CompiledCode a -> ByteString
getPlc :: () => CompiledCode a -> Program TyName Name ()
getPir :: () => CompiledCode a -> Program TyName Name ()

module Language.PlutusTx
makeLift :: Name -> Q [Dec]
